
create_invoice_latex :-
    write('Id of client:'),
    read(B),
    write('Month:'),
    read(D),
    write('Year:'),
    read(F),
    consumption(idclient(A),
                name(N),
                address(O),
                npersons(G),
                cubicmeters0_5(H),
                cubicmeters6_15(I),
                month(C),
                year(E)),
    A=B,
    C=D,
    E=F,
    J is G*1.5,
    K is 0.5*H,
    L is 1.0*I,
    M is J+K+L,
    assert(invoice(idclient(A),
                   water_bill(M),
                   month(C),
                   year(E))),
    latex_file(A,
               N,
               O,
               G,
               J,
               H,
               K,
               I,
               L,
               M,
               C,
               E).

month_text(M, MT) :-
    (   M==1,
        MT='Jan'
    ;   M==2,
        MT='Feb'
    ;   M==3,
        MT='Mar'
    ;   M==4,
        MT='Apr'
    ;   M==5,
        MT='May'
    ;   M==6,
        MT='Jun'
    ;   M==7,
        MT='Jul'
    ;   M==8,
        MT='Aug'
    ;   M==9,
        MT='Sep'
    ;   M==10,
        MT='Oct'
    ;   M==11,
        MT='Nov'
    ;   M==12,
        MT='Dec'
    ).

write_monthly_payment(WaterBill, Months, Year, IdClient, Name) :-
    tell('Graph.txt'),
    write('Digraph {\n'),
    write('  labelloc="t";\n  node[shape=plaintext];\n  edge[arrowhead=none];\n'),
    write('  graph[fontsize=20, label="Monthly Payment of '),
    write(Year),
    write('\\nId: '),
    write(IdClient),
    write(', Client: '),
    write(Name),
    write('"];\n'),
    draw_list_months(Months, WaterBill),
    write('}'),
    told.

menu :-
    write('\n---------------------------------------------------------------------\n'),
    write('-- 1. Insert the consumption of one client in one month            --\n'),
    write('-- 2. Create the invoice of a client in Latex                      --\n'),
    write('-- 3. Average consumption for one client in one year               --\n'),
    write('-- 4. Total payment for one client at the end of one year          --\n'),
    write('-- 5. Total of over 5 cubicmeters of all clients in the last year  --\n'),
    write('-- 6. Graph of a monthly payment of a client during one year       --\n'),
    write('-- 0. Exit and save                                                --\n'),
    write('---------------------------------------------------------------------\n\n'),
    read(A),
    choice(A).

calculate_average :-
    write('Id of Client:'),
    read(A),
    write('Year:'),
    read(B),
    consumption(idclient(A),
                name(C),
                _,
                _,
                _,
                _,
                _,
                _),
    write('\n\tWater Consumption of '),
    write(B),
    write(', '),
    write(C),
    write('\n---------------------------------------------------------------------'),
    not(client_consumption(A, B)),
    write('\n---------------------------------------------------------------------\n'),
    findall(D,
            ( consumption(idclient(E),
                          _,
                          _,
                          _,
                          cubicmeters0_5(D),
                          _,
                          _,
                          year(F)),
              E=A,
              F=B
            ),
            H),
    findall(G,
            ( consumption(idclient(E),
                          _,
                          _,
                          _,
                          _,
                          cubicmeters6_15(G),
                          _,
                          year(F)),
              E=A,
              F=B
            ),
            I),
    sum_up(H, D),
    sum_up(I, G),
    J is D+G,
    K is J/12,
    write('\tWater Average: '),
    write(K).

start :-
    menu.

:- multifile prolog_predicate_name/2.

prolog_predicate_name(pce_principal:send_implementation(Id0, _, _), Id) :-
    pce_portray:
    (   method_from_id(Id0, SG),
        atom_from_method(SG, Id)
    ).
prolog_predicate_name(pce_principal:get_implementation(Id0, _, _, _), Id) :-
    pce_portray:
    (   method_from_id(Id0, SG),
        atom_from_method(SG, Id)
    ).

draw_months(Months, S) :-
    month_text(Months, MonthText),
    Size is S*0.2,
    write('  '),
    write(Months),
    write('[shape=circle, label="", style=filled, color="#006699", fillcolor="#cceeff", fixedsize=true, width='),
    write(Size),
    write(', height='),
    write(Size),
    write('];\n'),
    write('  '),
    write(Months),
    write(' -> "'),
    write(MonthText),
    write(' - '),
    write(S),
    write('€";\n').

sum_up([], 0).
sum_up([X|Y], N) :-
    sum_up(Y, N1),
    N is N1+X.

insert_consumption :-
    write('Client Id:'),
    read(A),
    write('Name:'),
    read(B),
    write('Address:'),
    read(C),
    write('Number of Persons:'),
    read(D),
    write('CubicMeters (0 to 5):'),
    read(E),
    write('CubicMeters (6 to 15):'),
    read(F),
    write('Month:'),
    read(G),
    write('Year:'),
    read(H),
    !,
    assert(consumption(idclient(A),
                       name(B),
                       address(C),
                       npersons(D),
                       cubicmeters0_5(E),
                       cubicmeters6_15(F),
                       month(G),
                       year(H))).

:- dynamic pce_pre_expansion_hook/2.
:- multifile pce_pre_expansion_hook/2.

pce_pre_expansion_hook(In, Out) :-
    emacs_extend:emacs_expansion(In, Out).

latex_file(A, B, C, D, E, F, G, H, I, J, K, L) :-
    tell('WaterInvoice.txt'),
    write('\\newcommand{\\clientId}{'),
    write(A),
    write('}\n'),
    write('\\newcommand{\\toname}{'),
    write(B),
    write('}\n'),
    write('\\newcommand{\\toaddress}{'),
    write(C),
    write('}\n'),
    write('\\newcommand{\\sanitationfeeQuantity}{'),
    write(D),
    write('}\n'),
    write('\\newcommand{\\sanitationfeeTotal}{'),
    write(E),
    write('}\n'),
    write('\\newcommand{\\cubicmetersZeroQuantity}{'),
    write(F),
    write('}\n'),
    write('\\newcommand{\\cubicmetersZeroTotal}{'),
    write(G),
    write('}\n'),
    write('\\newcommand{\\cubicmetersSixQuantity}{'),
    write(H),
    write('}\n'),
    write('\\newcommand{\\cubicmetersSixTotal}{'),
    write(I),
    write('}\n'),
    write('\\newcommand{\\waterBill}{'),
    write(J),
    write('}\n'),
    write('\\newcommand{\\clientmonth}{'),
    write(K),
    write('}\n'),
    write('\\newcommand{\\clientyear}{'),
    write(L),
    write('}\n'),
    static_text_latex,
    told.

choice(A) :-
    (   A==1,
        insert_consumption,
        nl,
        menu
    ;   A==2,
        create_invoice_latex,
        nl,
        menu
    ;   A==3,
        calculate_average,
        nl,
        menu
    ;   A==4,
        calculate_total,
        nl,
        menu
    ;   A==5,
        over_5cubicmeters,
        nl,
        menu
    ;   A==6,
        graph_payment,
        nl,
        menu
    ;   A==0,
        save
    ).

graph_payment :-
    write('Id of client:'),
    read(C),
    write('Year:'),
    read(E),
    findall(A,
            ( invoice(idclient(B),
                      water_bill(A),
                      _,
                      year(D)),
              B=C,
              D=E
            ),
            G),
    findall(F,
            ( invoice(idclient(B), _, month(F), year(D)),
              B=C,
              D=E
            ),
            H),
    consumption(idclient(C),
                name(I),
                _,
                _,
                _,
                _,
                _,
                _),
    write_monthly_payment(G, H, E, C, I).

:- dynamic prolog_exception_hook/4.
:- multifile prolog_exception_hook/4.

prolog_exception_hook(error(E, context(Ctx0, Msg)), error(E, context(prolog_stack(Stack), Msg)), Fr, GuardSpec) :-
    prolog_stack:
    (   current_prolog_flag(backtrace, true),
        \+ is_stack(Ctx0, _Frames),
        (   atom(GuardSpec)
        ->  debug(backtrace,
                  'Got uncaught (guard = ~q) exception ~p (Ctx0=~p)',
                  [GuardSpec, E, Ctx0]),
            stack_guard(GuardSpec),
            Guard=GuardSpec
        ;   prolog_frame_attribute(GuardSpec,
                                   predicate_indicator,
                                   Guard),
            debug(backtrace,
                  'Got exception ~p (Ctx0=~p, Catcher=~p)',
                  [E, Ctx0, Guard]),
            stack_guard(Guard)
        ),
        (   current_prolog_flag(backtrace_depth, Depth)
        ->  Depth>0
        ;   Depth=20
        ),
        get_prolog_backtrace(Depth,
                             Stack0,
                             [frame(Fr), guard(Guard)]),
        debug(backtrace, 'Stack = ~p', [Stack0]),
        clean_stack(Stack0, Stack1),
        join_stacks(Ctx0, Stack1, Stack)
    ).

static_text_latex :-
    write('\n\\documentclass{scrlttr2}\n\n'),
    write('\\usepackage[utf8]{inputenc}\n'),
    write('\\usepackage[T1]{fontenc}\n'),
    write('\\usepackage{textcomp}\n'),
    write('\\usepackage{lmodern}\n'),
    write('\\usepackage{color}\n'),
    write('\\usepackage{spreadtab}\n'),
    write('\\usepackage{tabularx}\n'),
    write('\\usepackage{booktabs}\n'),
    write('\\usepackage{datetime}\n\n'),
    write('\\newcommand{\\taxID}{Tax Number: 617498954}\n'),
    write('\\renewcommand{\\familydefault}{\\sfdefault}\n\n'),
    write('\\setkomavar{subject}{Water Bill of \\monthname[\\clientmonth] \\clientyear }\n'),
    write('\\setkomavar{invoice}{\\clientyear\\clientmonth-01}\n'),
    write('\\setkomavar{date}[Date of invoice]{\\today}\n'),
    write('\\setkomavar{fromaddress}{3792 Pleasant Hill Road\\\\Musterhausen}\n'),
    write('\\setkomavar{backaddressseparator}{·}\n'),
    write('\\setkomavar{fromemail}[\\Letter~]{\\color[gray]{.3}info@watersmile.com}\n'),
    write('\\setkomavar{frommobilephone}{\\color[gray]{.3}+1\\,562\\,232\\,9486}\n'),
    write('\\setkomavar{frombank}{IBAN: 125\\,4485\\,1026\\,7843\\,4513\\,11\\\\BIC: AQDQ\\,XX\\,AQ\\,PTO\\\\meineBank}\n'),
    write('\\setkomavar{firstfoot}{\n'),
    write('  \\rule[3pt]{\\textwidth}{.4pt} \\\\ \n'),
    write('  \\parbox[t]{\\textwidth}{\\footnotesize\n'),
    write('    \\begin{tabular}[t]{@{}l}\n'),
    write('      \\usekomavar{frombank}\n'),
    write('    \\end{tabular}\n'),
    write('    \\hfill\n'),
    write('    \\begin{tabular}[t]{l@{}}\n'),
    write('      \\taxID\n'),
    write('    \\end{tabular}\n'),
    write('  }\n'),
    write('}\n\n'),
    write('\\KOMAoptions{\n'),
    write('  firsthead=true,\n'),
    write('  fromalign=right,\n'),
    write('  fromrule=false,\n'),
    write('  fromemail=true,\n'),
    write('  frommobilephone=true,\n'),
    write('  symbolicnames=true,\n'),
    write('  numericaldate=true,\n'),
    write('  firstfoot=true,\n'),
    write('  parskip=full\n'),
    write('}\n\n'),
    write('\\makeatletter\n'),
    write('\\@addtoplength{sigbeforevskip}{-1.5em}\n'),
    write('\\@addtoplength{firstfootvpos}{-2em}\n'),
    write('\\makeatother\n\n'),
    write('\\begin{document}\n'),
    write('\\begin{letter}{Nº: \\clientId\\\\Name: \\toname\\\\Addres: \\toaddress}\n'),
    write('\\opening{Water Consumption}\n\n'),
    write('\\STsetdecimalsep{{,}}\n'),
    write('\\STautoround*{2}\n'),
    write('\\begin{spreadtab}{{tabularx}{\\textwidth}{Xrrr}}\n'),
    write('\\toprule\n'),
    write('@\\multicolumn{1}{l}{Description} &\n'),
    write('@\\multicolumn{1}{l}{Price Unit} &\n'),
    write('@\\multicolumn{1}{l}{Quantity} &\n'),
    write('@\\multicolumn{1}{l}{Total}       \\\\\n'),
    write('\\midrule\n'),
    write('@Sanitation fee                                     &\n'),
    write(':={1.50}\\,€ & \\sanitationfeeQuantity & :=\\sanitationfeeTotal\\,€ \\\\ \n'),
    write('@CubicMeters (0 to 5):&\n'),
    write(':={0.50}\\,€ & \\cubicmetersZeroQuantity & :=\\cubicmetersZeroTotal\\,€ \\\\ \n'),
    write('@CubicMeters (6 to 15):&\n'),
    write(':={1.00}\\,€ & \\cubicmetersSixQuantity & :=\\cubicmetersSixTotal\\,€ \\\\ \n'),
    write('\\midrule \\midrule\n'),
    write('\\multicolumn{4}{r}{Total :=\\waterBill\\,€}\\\\ \n'),
    write('\\bottomrule\n'),
    write('\\end{spreadtab}\n'),
    write('\\closing{}\n'),
    write('\\end{letter}\n'),
    write('\\end{document}').

:- dynamic pce_post_expansion_hook/2.
:- multifile pce_post_expansion_hook/2.


:- multifile url_path/2.


save :-
    tell('WaterConsumptionInvoices.txt'),
    listing,
    told.

draw_list_months([], []).
draw_list_months([A|B], [C|D]) :-
    draw_months(A, C),
    draw_list_months(B, D).

clients_consumption(H) :-
    consumption(idclient(A),
                name(B),
                _,
                _,
                _,
                cubicmeters6_15(F),
                month(G),
                year(H)),
    month_text(G, MT),
    write('\n\t'),
    write(MT),
    write('\tClient Id:'),
    write(A),
    write('\tName:'),
    write(B),
    write('\t[6,15]M³:'),
    write(F),
    fail.

:- dynamic consumption/8.

consumption(idclient(1000), name('John'), address('Lisbon'), npersons(2), cubicmeters0_5(5), cubicmeters6_15(1.3), month(1), year(2018)).
consumption(idclient(1000), name('John'), address('Lisbon'), npersons(1), cubicmeters0_5(3), cubicmeters6_15(0), month(1), year(2019)).
consumption(idclient(1000), name('John'), address('Lisbon'), npersons(1), cubicmeters0_5(4), cubicmeters6_15(0), month(2), year(2019)).
consumption(idclient(1000), name('John'), address('Lisbon'), npersons(2), cubicmeters0_5(5), cubicmeters6_15(1), month(3), year(2019)).
consumption(idclient(1000), name('John'), address('Lisbon'), npersons(2), cubicmeters0_5(5), cubicmeters6_15(2), month(4), year(2019)).
consumption(idclient(1000), name('John'), address('Lisbon'), npersons(1), cubicmeters0_5(3), cubicmeters6_15(0), month(5), year(2019)).
consumption(idclient(1000), name('John'), address('Lisbon'), npersons(2), cubicmeters0_5(5), cubicmeters6_15(3), month(6), year(2019)).
consumption(idclient(1000), name('John'), address('Lisbon'), npersons(1), cubicmeters0_5(1), cubicmeters6_15(0), month(7), year(2019)).
consumption(idclient(1000), name('John'), address('Lisbon'), npersons(2), cubicmeters0_5(4), cubicmeters6_15(0), month(8), year(2019)).
consumption(idclient(1000), name('John'), address('Lisbon'), npersons(1), cubicmeters0_5(2), cubicmeters6_15(0), month(9), year(2019)).
consumption(idclient(1000), name('John'), address('Lisbon'), npersons(1), cubicmeters0_5(3), cubicmeters6_15(0), month(10), year(2019)).
consumption(idclient(1000), name('John'), address('Lisbon'), npersons(1), cubicmeters0_5(5), cubicmeters6_15(1), month(11), year(2019)).
consumption(idclient(1000), name('John'), address('Lisbon'), npersons(2), cubicmeters0_5(5), cubicmeters6_15(3), month(12), year(2019)).
consumption(idclient(1100), name('Steve'), address('New York'), npersons(1), cubicmeters0_5(1.6), cubicmeters6_15(0), month(1), year(2018)).
consumption(idclient(1100), name('Steve'), address('New York'), npersons(1), cubicmeters0_5(2), cubicmeters6_15(0), month(2), year(2018)).
consumption(idclient(1100), name('Steve'), address('New York'), npersons(1), cubicmeters0_5(3.4), cubicmeters6_15(0), month(3), year(2018)).
consumption(idclient(1100), name('Steve'), address('New York'), npersons(1), cubicmeters0_5(1.8), cubicmeters6_15(0), month(4), year(2018)).
consumption(idclient(1100), name('Steve'), address('New York'), npersons(2), cubicmeters0_5(4.9), cubicmeters6_15(0), month(5), year(2018)).
consumption(idclient(1100), name('Steve'), address('New York'), npersons(2), cubicmeters0_5(5), cubicmeters6_15(1.2), month(6), year(2018)).
consumption(idclient(1100), name('Steve'), address('New York'), npersons(2), cubicmeters0_5(3.8), cubicmeters6_15(0), month(7), year(2018)).
consumption(idclient(1100), name('Steve'), address('New York'), npersons(1), cubicmeters0_5(1.7), cubicmeters6_15(0), month(8), year(2018)).
consumption(idclient(1100), name('Steve'), address('New York'), npersons(2), cubicmeters0_5(5), cubicmeters6_15(0.2), month(9), year(2018)).
consumption(idclient(1100), name('Steve'), address('New York'), npersons(2), cubicmeters0_5(4.8), cubicmeters6_15(0), month(10), year(2018)).
consumption(idclient(1100), name('Steve'), address('New York'), npersons(2), cubicmeters0_5(4.7), cubicmeters6_15(0), month(11), year(2018)).
consumption(idclient(1100), name('Steve'), address('New York'), npersons(2), cubicmeters0_5(5), cubicmeters6_15(1.2), month(12), year(2018)).
consumption(idclient(1200), name('Susan'), address('London'), npersons(2), cubicmeters0_5(5), cubicmeters6_15(1), month(2), year(2018)).
consumption(idclient(1200), name('Susan'), address('London'), npersons(2), cubicmeters0_5(5), cubicmeters6_15(3.1), month(1), year(2018)).
consumption(idclient(1200), name('Susan'), address('London'), npersons(2), cubicmeters0_5(4.8), cubicmeters6_15(0), month(3), year(2018)).

:- multifile prolog_clause_name/2.

prolog_clause_name(Ref, Name) :-
    pce_portray:
    (   clause(Head, _, Ref),
        user:prolog_predicate_name(Head, Name)
    ).

calculate_total :-
    write('Id of client:'),
    read(A),
    write('Year:'),
    read(B),
    consumption(idclient(A),
                name(C),
                _,
                _,
                _,
                _,
                _,
                _),
    write('\n\tWater Bill of '),
    write(B),
    write(', '),
    write(C),
    write('\n---------------------------------------------------------------------'),
    not(client_invoice(A, B)),
    write('\n---------------------------------------------------------------------\n'),
    findall(D,
            ( invoice(idclient(E),
                      water_bill(D),
                      _,
                      year(F)),
              E=A,
              F=B
            ),
            G),
    sum_up(G, H),
    write('\tWater Bill: '),
    write(H),
    write(€).

client_consumption(A, H) :-
    consumption(idclient(A),
                _,
                _,
                _,
                cubicmeters0_5(E),
                cubicmeters6_15(F),
                month(G),
                year(H)),
    month_text(G, MT),
    write('\n\t'),
    write(MT),
    write('\t[0,5]M³:'),
    write(E),
    write('\t[6,15]M³:'),
    write(F),
    fail.

:- dynamic invoice/4.

invoice(idclient(1000), water_bill(6.8), month(1), year(2018)).
invoice(idclient(1000), water_bill(3), month(1), year(2019)).
invoice(idclient(1000), water_bill(3.5), month(2), year(2019)).
invoice(idclient(1000), water_bill(6.5), month(3), year(2019)).
invoice(idclient(1000), water_bill(7.5), month(4), year(2019)).
invoice(idclient(1000), water_bill(3), month(5), year(2019)).
invoice(idclient(1000), water_bill(8.5), month(6), year(2019)).
invoice(idclient(1000), water_bill(2), month(7), year(2019)).
invoice(idclient(1000), water_bill(5), month(8), year(2019)).
invoice(idclient(1000), water_bill(2.5), month(9), year(2019)).
invoice(idclient(1000), water_bill(3), month(10), year(2019)).
invoice(idclient(1000), water_bill(5), month(11), year(2019)).
invoice(idclient(1000), water_bill(8.5), month(12), year(2019)).
invoice(idclient(1100), water_bill(2.3), month(1), year(2018)).
invoice(idclient(1100), water_bill(2.5), month(2), year(2018)).
invoice(idclient(1100), water_bill(3.2), month(3), year(2018)).
invoice(idclient(1100), water_bill(2.4), month(4), year(2018)).
invoice(idclient(1100), water_bill(5.45), month(5), year(2018)).
invoice(idclient(1100), water_bill(6.7), month(6), year(2018)).
invoice(idclient(1100), water_bill(4.9), month(7), year(2018)).
invoice(idclient(1100), water_bill(2.35), month(8), year(2018)).
invoice(idclient(1100), water_bill(5.7), month(9), year(2018)).
invoice(idclient(1100), water_bill(5.4), month(10), year(2018)).
invoice(idclient(1100), water_bill(5.35), month(11), year(2018)).
invoice(idclient(1100), water_bill(6.7), month(12), year(2018)).
invoice(idclient(1200), water_bill(6.5), month(2), year(2018)).
invoice(idclient(1200), water_bill(8.6), month(1), year(2018)).
invoice(idclient(1200), water_bill(5.4), month(3), year(2018)).

over_5cubicmeters :-
    current_year(A),
    B is A+ -1,
    write('\n\tOver 5 cubicmeters of '),
    write(B),
    write('\n---------------------------------------------------------------------'),
    not(clients_consumption(B)),
    write('\n---------------------------------------------------------------------\n'),
    findall(C,
            ( consumption(_,
                          _,
                          _,
                          _,
                          _,
                          cubicmeters6_15(C),
                          _,
                          year(D)),
              D=B
            ),
            E),
    sum_up(E, F),
    write('\tWater Total: '),
    write(F),
    write('M³').

:- thread_local thread_message_hook/3.
:- dynamic thread_message_hook/3.
:- volatile thread_message_hook/3.


client_invoice(A, D) :-
    invoice(idclient(A),
            water_bill(B),
            month(C),
            year(D)),
    month_text(C, MT),
    write('\n\t'),
    write(MT),
    write('\t'),
    write(B),
    write(€),
    fail.

current_year(Y) :-
    get_time(T),
    stamp_date_time(T,
                    date(Y,
                         _,
                         _,
                         _,
                         _,
                         _,
                         _,
                         _,
                         _),
                    'UTC').
